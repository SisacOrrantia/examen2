from django.contrib.auth.models import User
from pendientes.models import Pendiente

# Crear usuarios adicionales
users_data = [
    {'username': 'maria_garcia', 'email': 'maria@parrasdev.com', 'password': 'password123', 'first_name': 'Mar√≠a', 'last_name': 'Garc√≠a'},
    {'username': 'juan_perez', 'email': 'juan@parrasdev.com', 'password': 'password123', 'first_name': 'Juan', 'last_name': 'P√©rez'},
    {'username': 'ana_rodriguez', 'email': 'ana@parrasdev.com', 'password': 'password123', 'first_name': 'Ana', 'last_name': 'Rodr√≠guez'},
    {'username': 'carlos_lopez', 'email': 'carlos@parrasdev.com', 'password': 'password123', 'first_name': 'Carlos', 'last_name': 'L√≥pez'},
]

created_users = []
for user_data in users_data:
    user, created = User.objects.get_or_create(
        username=user_data['username'],
        defaults={
            'email': user_data['email'],
            'first_name': user_data['first_name'],
            'last_name': user_data['last_name']
        }
    )
    if created:
        user.set_password(user_data['password'])
        user.save()
        print(f"Usuario {user.username} creado")
    created_users.append(user)

# Obtener todos los usuarios incluyendo admin
all_users = User.objects.all()

# Crear pendientes de ejemplo en espa√±ol
pendientes_data = [
    {'title': 'Desarrollar API REST para inventario', 'description': 'Crear endpoints para gesti√≥n de productos', 'completed': False},
    {'title': 'Implementar autenticaci√≥n JWT', 'description': 'Agregar sistema de tokens para seguridad', 'completed': True},
    {'title': 'Dise√±ar base de datos de clientes', 'description': 'Crear modelo entidad-relaci√≥n para CRM', 'completed': False},
    {'title': 'Configurar servidor de producci√≥n', 'description': 'Deployer aplicaci√≥n en AWS', 'completed': True},
    {'title': 'Crear documentaci√≥n t√©cnica', 'description': 'Documentar todos los endpoints de la API', 'completed': False},
    {'title': 'Optimizar consultas de base de datos', 'description': 'Mejorar rendimiento con √≠ndices', 'completed': True},
    {'title': 'Implementar sistema de notificaciones', 'description': 'Env√≠o de emails autom√°ticos', 'completed': False},
    {'title': 'Realizar pruebas unitarias', 'description': 'Cobertura m√≠nima del 80%', 'completed': False},
    {'title': 'Integrar sistema de pagos', 'description': 'Conexi√≥n con PayPal y Stripe', 'completed': True},
    {'title': 'Desarrollar panel de administraci√≥n', 'description': 'Interface para gesti√≥n de usuarios', 'completed': False},
    {'title': 'Configurar backup autom√°tico', 'description': 'Respaldo diario de la base de datos', 'completed': True},
    {'title': 'Implementar cache Redis', 'description': 'Mejorar velocidad de respuesta', 'completed': False},
    {'title': 'Crear aplicaci√≥n m√≥vil', 'description': 'App nativa para iOS y Android', 'completed': False},
    {'title': 'Configurar monitoring', 'description': 'Alertas para errores del sistema', 'completed': True},
    {'title': 'Actualizar dependencias', 'description': 'Mantener librer√≠as actualizadas', 'completed': False},
    {'title': 'Implementar b√∫squeda avanzada', 'description': 'Filtros y ordenamiento completo', 'completed': False},
    {'title': 'Crear sistema de reportes', 'description': 'Generar PDFs con estad√≠sticas', 'completed': True},
    {'title': 'Optimizar interfaz de usuario', 'description': 'Mejorar UX/UI del dashboard', 'completed': False},
    {'title': 'Configurar CI/CD', 'description': 'Pipeline automatizado de deployment', 'completed': True},
    {'title': 'Implementar websockets', 'description': 'Comunicaci√≥n en tiempo real', 'completed': False},
]

# Asignar pendientes a usuarios aleatoriamente
import random
for i, pendiente_data in enumerate(pendientes_data):
    user = all_users[i % len(all_users)]
    pendiente, created = Pendiente.objects.get_or_create(
        title=pendiente_data['title'],
        defaults={
            'description': pendiente_data['description'],
            'completed': pendiente_data['completed'],
            'user': user
        }
    )
    if created:
        print(f"Pendiente '{pendiente.title}' creado para {user.username}")

print(f"\n‚úÖ Datos de prueba creados exitosamente!")
print(f"üë• Usuarios: {User.objects.count()}")
print(f"üìã Pendientes: {Pendiente.objects.count()}")
print(f"‚úÖ Completados: {Pendiente.objects.filter(completed=True).count()}")
print(f"‚è≥ Pendientes: {Pendiente.objects.filter(completed=False).count()}")
